Connected horses
Send Feedback
You all must be familiar with the chess-board having 
8*8 squares of alternate black and white cells. Well, here 
we have for you a similar 
N*M size board with similar arrangement of black and white 
cells.
A few of these cells have Horses placed over them. 
Each horse is unique. Now these horses are not the 
usual horses which could jump to any of the 
8 positions they usually jump in. They can move only if there is another horse on one of the 8-positions that it can     go to usually and then both the horses will swap their positions. This swapping can happen infinitely times.
A photographer was assigned to take a picture of all the different ways that the horses occupy the board! Given the state of the board, calculate answer. Sincethis answer may be quite large, calculate in modulo 
10^9+7
Input:
First line contains 
T which is the number of test cases.
T test cases follow first line of each containing three integers 
N, M and Q where 
N,M is the size of the board and 
Q is the number of horses on it.

Q lines follow each containing the 2 integers 
X and Y which are the coordinates of the Horses.
Output:
For each test case, output the number of photographs taken by photographer.
Constraints:
 1<=T<=10
 1<=N,M<=1000
 1<=Q<=N*M
SAMPLE INPUT
2
4 4 4
1 1
1 2
3 1
3 2
4 4 4
1 1
1 2
3 1
4 4
SAMPLE OUTPUT
4
2



#include<bits/stdc++.h>
using namespace std; 
int x2[]={2,2,-2,-2,1,1,-1,-1};
int y2[]={1,-1,1,-1,2,-2,2,-2};
int n,m,q;
bool issafe(int x,int y,int** dp,bool** visited){
      return(x>=1 && y>=1 && x<=n && y<=m && !visited[x][y] && dp[x][y]==1);
}
int bfs(int** dp,bool** visited,int i,int j){
   long long int count=0;
   queue<pair<int,int>>q;
    visited[i][j]=1;
    q.push(make_pair(i,j));
    count=1;
    while(!q.empty()){
        pair<int,int> p=q.front();
        q.pop();
        int x=p.first;int y=p.second;
        for(int i=0;i<8;i++){
             int x_cor=x+x2[i];
                int y_cor=y+y2[i];
               
            if(issafe(x_cor,y_cor,dp,visited)){
             //   cout<<x_cor<<" "<<y_cor<<endl;
                q.push(make_pair(x_cor,y_cor));
                visited[x_cor][y_cor]=1;
                count++;
            }
        }
    }
return count;
}
int dfs(int** dp,bool** visited,int i,int j,int &count){
     visited[i][j]=1;
    for(int i=0;i<8;i++){
             int x_cor=x+x2[i];
                int y_cor=y+y2[i];
               
            if(issafe(x_cor,y_cor,dp,visited)){
                count++;
                 visited[x_cor][y_cor]=1;
             dfs(dp,visited,i,j,count)
               
                //count++;
            }
        }
}
int main(){
    int t;cin>>t;
    int factorial[1000001];
    factorial[0]=1;
    for(long long int i=1;i<=1000001;i++){
        factorial[i]=(i*factorial[i-1])%1000000007;
    }
    while(t--){
        cin>>n;cin>>m;cin>>q;
        int** dp=new int*[n+1];
        for(int i=0;i<n+1;i++){
            dp[i]=new int[m+1];
            for(int j=0;j<m+1;j++){
                dp[i][j]=0;
            }
        }
        while(q--){
            int x,y;cin>>x>>y;
            dp[x][y]=1;
        }
        bool** visited=new bool*[n+1];
        for(int i=0;i<n+1;i++){
            visited[i]=new bool[m+1];
            for(int j=0;j<m+1;j++){
                visited[i][j]=0;
            }
        }
       long long int count=0;long long int ans=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                count=0;
                if(!visited[i][j] && dp[i][j]==1){
                  int f=dfs(visited,i,j,count);
                   ans=(ans*factorial[count])%1000000007;
                }
            }
        }
        cout<<ans<<endl;
    }
}
